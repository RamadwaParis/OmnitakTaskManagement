@model IEnumerable<OmintakProduction.Models.Task>

@{
    ViewData["Title"] = "Task Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="work-item-title"><i class="fas fa-tasks text-primary me-2"></i>Task Management</h2>
    <!-- Task creation is only allowed via Tickets/Manage Tasks -->
</div>

<!-- Task Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="work-item-card text-center">
            <div class="work-item-body">
                <h5 class="work-item-title">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.Todo)</h5>
                <p class="work-item-description">To Do</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="work-item-card text-center">
            <div class="work-item-body">
                <h5 class="work-item-title">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.InProgress)</h5>
                <p class="work-item-description">In Progress</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="work-item-card text-center">
            <div class="work-item-body">
                <h5 class="work-item-title">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.InReview)</h5>
                <p class="work-item-description">In Review</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="work-item-card text-center">
            <div class="work-item-body">
                <h5 class="work-item-title">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.Completed)</h5>
                <p class="work-item-description">Completed</p>
            </div>
        </div>
    </div>
</div>

<!-- Task Board View -->
<div class="mb-3">
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary active" onclick="showView('board')">
            <i class="fas fa-columns me-1"></i>Board View
        </button>
        <button type="button" class="btn btn-outline-primary" onclick="showView('list')">
            <i class="fas fa-list me-1"></i>List View
        </button>
    </div>
</div>

<!-- Kanban Board View -->
<div id="boardView" class="row">
    <div class="col-md-3">
        <div class="work-item-card">
            <div class="work-item-header">
                <h6 class="mb-0 work-item-title">To Do</h6>
            </div>
            <div class="work-item-body p-2" id="todoColumn">
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.Todo))
                {
                    <div class="work-item-card mb-2 task-card auto-contrast-text" data-task-id="@task.Id">
                        <div class="work-item-body p-3">
                            <h6 class="work-item-title">@task.Title</h6>
                            <p class="work-item-description small">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="status-badge status-@(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "critical" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "in-progress" : "new")">
                                    @task.Priority
                                </span>
                                <small class="work-item-meta">@task.CreatedAt.ToString("MMM dd")</small>
                            </div>
                            <div class="mt-2">
                                <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-primary">View</a>
                                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-secondary">Edit</a>
                                <form asp-action="Delete" asp-route-id="@task.Id" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this task?');">
                                    <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="work-item-card">
            <div class="work-item-header">
                <h6 class="mb-0 work-item-title">In Progress</h6>
            </div>
            <div class="work-item-body p-2" id="progressColumn">
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.InProgress))
                {
                    <div class="work-item-card mb-2 task-card auto-contrast-text" data-task-id="@task.Id">
                        <div class="work-item-body p-3">
                            <h6 class="work-item-title">@task.Title</h6>
                            <p class="work-item-description small">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="status-badge status-@(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "critical" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "in-progress" : "new")">
                                    @task.Priority
                                </span>
                                <small class="work-item-meta">@task.CreatedAt.ToString("MMM dd")</small>
                            </div>
                            <div class="mt-2">
                                <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-primary">View</a>
                                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-secondary">Edit</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="work-item-card">
            <div class="work-item-header">
                <h6 class="mb-0 work-item-title">In Review</h6>
            </div>
            <div class="work-item-body p-2" id="reviewColumn">
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.InReview))
                {
                    <div class="work-item-card mb-2 task-card auto-contrast-text" data-task-id="@task.Id">
                        <div class="work-item-body p-3">
                            <h6 class="work-item-title">@task.Title</h6>
                            <p class="work-item-description small">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="status-badge status-@(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "critical" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "in-progress" : "new")">
                                    @task.Priority
                                </span>
                                <small class="work-item-meta">@task.CreatedAt.ToString("MMM dd")</small>
                            </div>
                            <div class="mt-2">
                                <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-primary">View</a>
                                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-secondary">Edit</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h6 class="mb-0">Completed</h6>
            </div>
            <div class="card-body p-2" id="completedColumn">
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.Completed))
                {
                    <div class="card mb-2 task-card" data-task-id="@task.Id">
                        <div class="card-body p-3">
                            <h6 class="card-title">@task.Title</h6>
                            <p class="card-text small text-muted">@task.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-@(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "danger" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "warning" : "secondary")">
                                    @task.Priority
                                </span>
                                <small class="text-muted">@task.CompletedAt?.ToString("MMM dd")</small>
                            </div>
                            <div class="mt-2">
                                <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-primary">View</a>
                                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- List View -->
<div id="listView" style="display: none;">
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">All Tasks</h5>
                </div>
                <div class="col-auto">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="filterTasks('all')">All</button>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="filterTasks('todo')">To Do</button>
                        <button type="button" class="btn btn-outline-warning btn-sm" onclick="filterTasks('progress')">In Progress</button>
                        <button type="button" class="btn btn-outline-success btn-sm" onclick="filterTasks('completed')">Completed</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="tasksTable">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Status</th>
                            <th>Priority</th>
                            <th>Ticket</th>
                            <th>Due Date</th>
                            <th>Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in Model)
                        {
                            <tr data-status="@task.Status.ToString().ToLower()">
                                <td>
                                    <strong>@task.Title</strong>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <br />
                                        <small class="text-muted">@task.Description</small>
                                    }
                                </td>
                                <td>
                                    @{
                                        var statusClass = task.Status switch
                                        {
                                            OmintakProduction.Models.TaskStatus.Todo => "bg-light text-dark",
                                            OmintakProduction.Models.TaskStatus.InProgress => "bg-warning",
                                            OmintakProduction.Models.TaskStatus.InReview => "bg-info",
                                            OmintakProduction.Models.TaskStatus.Completed => "bg-success",
                                            OmintakProduction.Models.TaskStatus.Cancelled => "bg-danger",
                                            OmintakProduction.Models.TaskStatus.OnHold => "bg-secondary",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusClass">@task.Status</span>
                                </td>
                                <td>
                                    @{
                                        var priorityClass = task.Priority switch
                                        {
                                            OmintakProduction.Models.TaskPriority.Low => "bg-light text-dark",
                                            OmintakProduction.Models.TaskPriority.Medium => "bg-warning",
                                            OmintakProduction.Models.TaskPriority.High => "bg-orange text-white",
                                            OmintakProduction.Models.TaskPriority.Critical => "bg-danger",
                                            OmintakProduction.Models.TaskPriority.Urgent => "bg-dark",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @priorityClass">@task.Priority</span>
                                </td>
                                <td>
                                    @if (task.Ticket != null)
                                    {
                                        <span class="badge bg-info">#@task.Ticket.Id</span> <span>@task.Ticket.Title</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-light text-dark">No Ticket</span>
                                    }
                                </td>
                                <td>
                                    @if (task.DueDate.HasValue)
                                    {
                                        @task.DueDate.Value.ToString("MMM dd, yyyy")
                                        @if (task.DueDate.Value < DateTime.Now && task.Status != OmintakProduction.Models.TaskStatus.Completed)
                                        {
                                            <i class="fas fa-exclamation-triangle text-danger" title="Overdue"></i>
                                        }
                                    }
                                </td>
                                <td>@task.CreatedAt.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <form asp-action="Delete" asp-route-id="@task.Id" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this task?');">
                                        <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    function showView(viewType) {
        const boardView = document.getElementById('boardView');
        const listView = document.getElementById('listView');
        const buttons = document.querySelectorAll('.btn-group .btn');
        
        // Reset button states
        buttons.forEach(btn => btn.classList.remove('active'));
        
        if (viewType === 'board') {
            boardView.style.display = 'flex';
            listView.style.display = 'none';
            buttons[0].classList.add('active');
        } else {
            boardView.style.display = 'none';
            listView.style.display = 'block';
            buttons[1].classList.add('active');
        }
    }

    function filterTasks(status) {
        const rows = document.querySelectorAll('#tasksTable tbody tr');
        const buttons = document.querySelectorAll('#listView .btn-group .btn');
        
        // Reset button states
        buttons.forEach(btn => btn.classList.remove('active'));
        
        // Set active button
        event.target.classList.add('active');
        
        rows.forEach(row => {
            if (status === 'all') {
                row.style.display = '';
            } else {
                const rowStatus = row.getAttribute('data-status');
                if (status === 'progress' && rowStatus === 'inprogress') {
                    row.style.display = '';
                } else if (rowStatus === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            }
        });
    }
</script>

<style>
    /* Kanban/Teams purple theme for tasks */
.kanban-board {
    display: flex;
    gap: 2rem;
    overflow-x: auto;
    padding-bottom: 1rem;
}
.kanban-column {
    background: linear-gradient(135deg, #7c3aed 0%, #a78bfa 100%);
    border-radius: 18px;
    box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.18), 0 1.5px 8px 0 rgba(124, 58, 237, 0.10);
    min-width: 320px;
    flex: 1 1 320px;
    padding: 1.5rem 1rem;
    color: #fff;
}
.kanban-column-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #fff;
    text-shadow: 0 2px 8px rgba(124, 58, 237, 0.10);
}
.task-card {
    background: #fff;
    color: #7c3aed;
    border-radius: 14px;
    box-shadow: 0 4px 16px 0 rgba(124, 58, 237, 0.10);
    margin-bottom: 1.2rem;
    padding: 1.2rem 1rem;
    transition: box-shadow 0.2s, transform 0.2s;
    border: none;
}
.task-card:hover {
    box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.18);
    transform: translateY(-2px) scale(1.01);
}
.status-badge {
    border-radius: 8px;
    padding: 0.2rem 0.7rem;
    font-size: 0.95rem;
    font-weight: 500;
    background: #ede9fe;
    color: #7c3aed;
}
.status-critical {
    background: #d946ef;
    color: #fff;
}
.status-in-progress {
    background: #a78bfa;
    color: #fff;
}
.status-new {
    background: #c7d2fe;
    color: #7c3aed;
}
    .task-card {
        cursor: pointer;
        transition: transform 0.2s ease;
    }
    
    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .bg-orange {
        background-color: #fd7e14 !important;
    }
</style>
