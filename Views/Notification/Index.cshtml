@model IEnumerable<OmintakProduction.Models.Notification>

@{
    ViewData["Title"] = "Notifications";
}

<div class="teams-page-header">
    <h1 class="teams-page-title">Notifications</h1>
    <p class="teams-page-subtitle">Stay updated with your latest notifications</p>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="btn-group" role="group">
        <button type="button" class="teams-btn teams-btn-secondary filter-btn active" data-filter="all">All</button>
        <button type="button" class="teams-btn teams-btn-secondary filter-btn" data-filter="unread">Unread</button>
        <button type="button" class="teams-btn teams-btn-secondary filter-btn" data-filter="read">Read</button>
    </div>
    <button type="button" class="teams-btn" id="mark-all-read">
        <i class="fas fa-check-double"></i>
        Mark All as Read
    </button>
</div>

<div class="notifications-container">
    @if (Model.Any())
    {
        @foreach (var notification in Model)
        {
            <div class="teams-card notification-item @(notification.IsRead ? "read" : "unread")" data-status="@(notification.IsRead ? "read" : "unread")" data-id="@notification.Id">
                <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                        <div class="d-flex align-items-center mb-2">
                            <div class="notification-icon me-3">
                                @switch (notification.Type)
                                {
                                    case OmintakProduction.Models.NotificationType.Task:
                                        <i class="fas fa-tasks text-primary"></i>
                                        break;
                                    case OmintakProduction.Models.NotificationType.Success:
                                        <i class="fas fa-check-circle text-success"></i>
                                        break;
                                    case OmintakProduction.Models.NotificationType.Project:
                                        <i class="fas fa-project-diagram text-info"></i>
                                        break;
                                    case OmintakProduction.Models.NotificationType.Warning:
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                        break;
                                    case OmintakProduction.Models.NotificationType.Error:
                                        <i class="fas fa-exclamation-circle text-danger"></i>
                                        break;
                                    default:
                                        <i class="fas fa-bell text-secondary"></i>
                                        break;
                                }
                            </div>
                            <div>
                                <h6 class="mb-1 @(notification.IsRead ? "text-muted" : "fw-bold")">@notification.Title</h6>
                                <small class="text-muted">@notification.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                            </div>
                            @if (!notification.IsRead)
                            {
                                <span class="badge bg-primary ms-2">New</span>
                            }
                        </div>
                        <p class="mb-2 @(notification.IsRead ? "text-muted" : "")">@notification.Message</p>
                        @if (notification.IsRead && notification.ReadAt.HasValue)
                        {
                            <small class="text-muted">Read on @notification.ReadAt.Value.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                        }
                    </div>
                    <div class="notification-actions">
                        <div class="btn-group btn-group-sm">
                            <a asp-action="Details" asp-route-id="@notification.Id" class="btn btn-outline-primary btn-sm" title="View Details">
                                <i class="fas fa-eye"></i>
                            </a>
                            @if (!notification.IsRead)
                            {
                                <button type="button" class="btn btn-outline-success btn-sm mark-read-btn" data-id="@notification.Id" title="Mark as Read">
                                    <i class="fas fa-check"></i>
                                </button>
                            }
                            <a asp-action="Delete" asp-route-id="@notification.Id" class="btn btn-outline-danger btn-sm" title="Delete">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="teams-card text-center">
            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">No Notifications</h4>
            <p class="text-muted">You're all caught up! No notifications to display.</p>
        </div>
    }
</div>

<style>
    .notification-item {
        transition: all 0.3s ease;
    }
    
    .notification-item.unread {
        border-left: 4px solid var(--teams-blue);
        background-color: #f8f9ff;
    }
    
    .notification-item.read {
        opacity: 0.7;
    }
    
    .notification-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--teams-light-blue);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
    }
    
    .filter-btn.active {
        background: var(--teams-purple) !important;
        color: white !important;
        border-color: var(--teams-purple) !important;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const notificationItems = document.querySelectorAll('.notification-item');

        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');

                const filter = this.getAttribute('data-filter');

                // Show/hide notifications based on filter
                notificationItems.forEach(item => {
                    if (filter === 'all' || item.getAttribute('data-status') === filter) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });

        // Mark individual notification as read
        document.querySelectorAll('.mark-read-btn').forEach(button => {
            button.addEventListener('click', function() {
                const notificationId = this.getAttribute('data-id');
                markAsRead(notificationId, this);
            });
        });

        // Mark all notifications as read
        document.getElementById('mark-all-read').addEventListener('click', function() {
            markAllAsRead();
        });

        function markAsRead(notificationId, button) {
            fetch(`/Notification/MarkAsRead/${notificationId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const notificationItem = button.closest('.notification-item');
                    notificationItem.classList.remove('unread');
                    notificationItem.classList.add('read');
                    notificationItem.setAttribute('data-status', 'read');
                    button.style.display = 'none';
                    updateNotificationBadge();
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function markAllAsRead() {
            fetch('/Notification/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.querySelectorAll('.notification-item.unread').forEach(item => {
                        item.classList.remove('unread');
                        item.classList.add('read');
                        item.setAttribute('data-status', 'read');
                    });
                    document.querySelectorAll('.mark-read-btn').forEach(btn => {
                        btn.style.display = 'none';
                    });
                    updateNotificationBadge();
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function updateNotificationBadge() {
            const badge = document.getElementById('notification-badge');
            const unreadCount = document.querySelectorAll('.notification-item.unread').length;
            if (badge) {
                if (unreadCount > 0) {
                    badge.textContent = unreadCount;
                    badge.style.display = 'inline';
                } else {
                    badge.style.display = 'none';
                }
            }
        }
    });
</script>
