@using System.Security.Claims;
@{
    var hideNavbar = false;
    var controller = ViewContext.RouteData.Values["controller"]?.ToString()?.ToLower() ?? "";
    var action = ViewContext.RouteData.Values["action"]?.ToString()?.ToLower() ?? "";
    var viewCssPath = $"~/css/views/{controller}.css";
    
    if (controller.Equals("account", StringComparison.OrdinalIgnoreCase) &&
        (action.Equals("login", StringComparison.OrdinalIgnoreCase) ||
         action.Equals("register", StringComparison.OrdinalIgnoreCase)))
    {
        hideNavbar = true;
    }
    
    string? firstName = null;
    string? lastName = null;
    if (User.Identity?.IsAuthenticated == true)
    {
        firstName = ((ClaimsIdentity)User.Identity).Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value;
        lastName = ((ClaimsIdentity)User.Identity).Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname")?.Value;
    }
    string displayName = (firstName != null && lastName != null) ? $"{firstName} {lastName}" : User.Identity?.Name ?? "User";
}

<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Omnitak Task Management</title>
    
    <!-- Anti-forgery token for AJAX requests -->
    @Html.AntiForgeryToken()
    
    <!-- Main CSS -->
    <link rel="stylesheet" href="~/css/main.css" />
    
    <!-- View specific CSS -->
    @if (!string.IsNullOrEmpty(controller))
    {
        <link rel="stylesheet" href="~/css/views/@(controller).css" />
    }
    
    <!-- Action specific CSS -->
    @if (!string.IsNullOrEmpty(controller) && !string.IsNullOrEmpty(action))
    {
        var actionCssPath = $"~/css/views/{controller}/{action}.css";
        if (System.IO.File.Exists(actionCssPath.Replace("~", "wwwroot")))
        {
            <link rel="stylesheet" href="@actionCssPath" />
        }
    }
    
    <!-- Core styles -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <!-- Custom CSS Framework -->
    <link rel="stylesheet" href="~/css/theme.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/grid.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/layout.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/components.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/sidebar-fix.css" asp-append-version="true" />
    
    <!-- Legacy styles (to be removed) -->
    <link rel="stylesheet" href="~/css/microsoft365.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/premium-dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    
    <!-- View-specific styles -->
    <link rel="stylesheet" href="@viewCssPath" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    @if (!hideNavbar)
    {
        <header class="ms-header">
            <button class="ms-mobile-menu-toggle" id="mobileMenuToggle" type="button">
                <i class="fas fa-bars"></i>
            </button>
            <a class="ms-header-brand" asp-controller="Dashboard" asp-action="Index">
                <i class="fas fa-tasks"></i>
                Omnitak Task Management
            </a>
            
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="ms-header-nav">
                    <button id="themeToggle" class="ms-btn ms-btn-icon" title="Toggle theme">
                        <i class="fas fa-moon"></i>
                    </button>
                    <div class="ms-header-user">
                        <div class="ms-avatar">
                            @(displayName.Substring(0, 1).ToUpper())
                        </div>
                        <span>@displayName</span>
                        <form asp-controller="Account" asp-action="Logout" method="post" style="display:inline; margin-left: 8px;">
                            <button type="submit" class="ms-btn ms-btn-secondary" style="padding: 4px 8px; min-height: auto;">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                            @Html.AntiForgeryToken()
                        </form>
                    </div>
                </div>
            }
            else
            {
                <div class="ms-header-nav">
                    <a class="ms-btn ms-btn-secondary" asp-controller="Account" asp-action="Login">
                        <i class="fas fa-sign-in-alt"></i>
                        Login
                    </a>
                    <a class="ms-btn ms-btn-primary" asp-controller="Account" asp-action="Register">
                        <i class="fas fa-user-plus"></i>
                        Register
                    </a>
                </div>
            }
        </header>
    }

    @if (hideNavbar)
    {
        <!-- Login/Register pages without navbar -->
        <main style="display: contents;">
            @RenderBody()
        </main>
    }
    else if (User.Identity?.IsAuthenticated == true)
    {
        <div class="ms-layout">
            <aside class="ms-sidebar" id="sidebar">
                <div class="ms-sidebar-header">
                    <button class="ms-sidebar-toggle" id="sidebarToggle" type="button" title="Toggle Sidebar">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span class="ms-sidebar-brand">Navigation</span>
                </div>
                <div class="ms-sidebar-section">
                    <h6 class="ms-sidebar-title">Main</h6>
                    <a class="ms-sidebar-link" asp-controller="Dashboard" asp-action="Index" title="Dashboard">
                        <i class="fas fa-chart-line"></i>
                        <span>Dashboard</span>
                    </a>
                </div>

                <div class="ms-sidebar-section">
                    <h6 class="ms-sidebar-title">Work Items</h6>
                    <a class="ms-sidebar-link" asp-controller="Ticket" asp-action="Dashboard" title="Tickets">
                        <i class="fas fa-ticket-alt"></i>
                        <span>Tickets</span>
                    </a>
                    <a class="ms-sidebar-link" asp-controller="Project" asp-action="Index" title="Projects">
                        <i class="fas fa-project-diagram"></i>
                        <span>Projects</span>
                    </a>
                    <a class="ms-sidebar-link" asp-controller="Task" asp-action="Index" title="Tasks">
                        <i class="fas fa-tasks"></i>
                        <span>Tasks</span>
                    </a>
                </div>

                <div class="ms-sidebar-section">
                    <h6 class="ms-sidebar-title">Team</h6>
                    <a class="ms-sidebar-link" asp-controller="User" asp-action="Index" title="Team Members">
                        <i class="fas fa-users"></i>
                        <span>Team Members</span>
                    </a>
                    @await Component.InvokeAsync("Notification")
                </div>

                @if (User.IsInRole("SystemAdmin"))
                {
                    <div class="ms-sidebar-section">
                        <h6 class="ms-sidebar-title">Administration</h6>
                        <a class="ms-sidebar-link" asp-controller="Account" asp-action="ApproveUsers" title="Approve Users">
                            <i class="fas fa-user-check"></i>
                            <span>Approve Users</span>
                        </a>
                        <a class="ms-sidebar-link" asp-controller="User" asp-action="GetAllUsers" title="Manage Users">
                            <i class="fas fa-users-cog"></i>
                            <span>Manage Users</span>
                        </a>
                        <a class="ms-sidebar-link" asp-controller="Role" asp-action="Index" title="Roles">
                            <i class="fas fa-user-tag"></i>
                            <span>Roles</span>
                        </a>
                    </div>
                }

                <div class="ms-sidebar-section">
                    <h6 class="ms-sidebar-title">Reports</h6>
                    <a class="ms-sidebar-link" asp-controller="BugReport" asp-action="Index" title="Bug Reports">
                        <i class="fas fa-bug"></i>
                        <span>Bug Reports</span>
                    </a>
                    <a class="ms-sidebar-link" asp-controller="ProjectReport" asp-action="Index" title="Project Reports">
                        <i class="fas fa-file-alt"></i>
                        <span>Project Reports</span>
                    </a>
                    <a class="ms-sidebar-link" asp-controller="TestReport" asp-action="Index" title="Test Reports">
                        <i class="fas fa-vial"></i>
                        <span>Test Reports</span>
                    </a>
                </div>
            </aside>

            <main class="ms-main">
                @RenderBody()
            </main>
        </div>
    }
    else
    {
        <!-- Unauthenticated users -->
        <main style="display: contents;">
            @RenderBody()
        </main>
    }

    <!-- Admin Approval Modal -->
    @if (User.IsInRole("SystemAdmin"))
    {
        <div id="adminApprovalModal" class="admin-modal" style="display: none;">
            <div class="admin-modal-content">
                <div class="admin-modal-header">
                    <h3><i class="fas fa-user-check me-2"></i>Pending User Approvals</h3>
                    <button type="button" class="admin-modal-close" onclick="closeAdminModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="admin-modal-body" id="adminApprovalContent">
                    @await Component.InvokeAsync("AdminPendingApprovals")
                </div>
            </div>
        </div>
    }

    <!-- Scripts -->
    <script src="~/js/theme.js" asp-append-version="true"></script>
    <script src="~/js/layout.js" asp-append-version="true"></script>
    <script src="~/js/notification.js" asp-append-version="true"></script>
    <script src="~/js/date-validation.js" asp-append-version="true"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
    
    <script>
        // Admin approval modal functionality
        function showAdminModal() {
            const modal = document.getElementById('adminApprovalModal');
            if (modal) {
                modal.style.display = 'flex';
            }
        }
        
        function closeAdminModal() {
            const modal = document.getElementById('adminApprovalModal');
            if (modal) {
                modal.style.display = 'none';
            }
        }
        
        // Check for pending approvals on page load for SystemAdmin
        document.addEventListener('DOMContentLoaded', function() {
            @if (User.IsInRole("SystemAdmin"))
            {
                <text>
                // Only check for pending approvals if this is a fresh login
                const shouldCheckApprovals = @Html.Raw(ViewBag.CheckApprovals?.ToString().ToLower() ?? "false");
                
                if (shouldCheckApprovals) {
                    // Check if there are pending approvals and show modal
                    fetch('/api/checkPendingApprovals')
                        .then(response => response.json())
                        .then(data => {
                            if (data.hasPendingApprovals) {
                                setTimeout(() => showAdminModal(), 1000); // Show after 1 second
                            }
                        })
                        .catch(error => console.log('Error checking approvals:', error));
                }
                </text>
            }
        });
        
        // Approve user function
        async function approveUser(userId, userName) {
            try {
                const response = await fetch('/Account/ApproveUserQuick', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ userId: userId })
                });
                
                if (response.ok) {
                    // Remove the card from UI
                    const card = document.querySelector(`[data-user-id="${userId}"]`);
                    if (card) {
                        card.style.transition = 'all 0.3s ease';
                        card.style.opacity = '0';
                        card.style.transform = 'translateX(100%)';
                        setTimeout(() => card.remove(), 300);
                    }
                    
                    // Show success notification
                    showNotification(`${userName} has been approved successfully!`, 'success');
                    
                    // Check if no more cards left
                    setTimeout(() => {
                        const remainingCards = document.querySelectorAll('.approval-card');
                        if (remainingCards.length === 0) {
                            document.getElementById('adminApprovalContent').innerHTML = `
                                <div class="no-approvals text-center py-4">
                                    <i class="fas fa-check-circle text-success display-4 mb-3"></i>
                                    <h5>All Caught Up!</h5>
                                    <p class="text-muted">No users are currently waiting for approval.</p>
                                </div>
                            `;
                        }
                    }, 400);
                } else {
                    showNotification('Failed to approve user. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Error approving user:', error);
                showNotification('An error occurred while approving the user.', 'error');
            }
        }
        
        // Reject user function
        async function rejectUser(userId, userName) {
            if (!confirm(`Are you sure you want to reject ${userName}? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await fetch('/Account/RejectUserQuick', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ userId: userId })
                });
                
                if (response.ok) {
                    // Remove the card from UI
                    const card = document.querySelector(`[data-user-id="${userId}"]`);
                    if (card) {
                        card.style.transition = 'all 0.3s ease';
                        card.style.opacity = '0';
                        card.style.transform = 'translateX(-100%)';
                        setTimeout(() => card.remove(), 300);
                    }
                    
                    // Show success notification
                    showNotification(`${userName} has been rejected.`, 'info');
                    
                    // Check if no more cards left
                    setTimeout(() => {
                        const remainingCards = document.querySelectorAll('.approval-card');
                        if (remainingCards.length === 0) {
                            document.getElementById('adminApprovalContent').innerHTML = `
                                <div class="no-approvals text-center py-4">
                                    <i class="fas fa-check-circle text-success display-4 mb-3"></i>
                                    <h5>All Caught Up!</h5>
                                    <p class="text-muted">No users are currently waiting for approval.</p>
                                </div>
                            `;
                        }
                    }, 400);
                } else {
                    showNotification('Failed to reject user. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Error rejecting user:', error);
                showNotification('An error occurred while rejecting the user.', 'error');
            }
        }
        
        // Simple notification function
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `ms-notification ms-notification-${type}`;
            notification.innerHTML = `
                <div class="ms-notification-content">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
                <button class="ms-notification-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
        
        // Close modal when clicking outside
        document.addEventListener('click', function(e) {
            const modal = document.getElementById('adminApprovalModal');
            if (e.target === modal) {
                closeAdminModal();
            }
        });
    </script>
</body>
</html>
