@model IEnumerable<OmintakProduction.Models.Task>

@{
    ViewData["Title"] = "Task Management";
    var tasksByStatus = Model.GroupBy(t => t.Status);
}

<!-- Add drag and drop JavaScript -->
<script src="~/js/dragdrop.js"></script>

<div class="ms-page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="ms-page-title">
                <i class="fas fa-tasks me-2"></i>Task Management
            </h1>
            <p class="ms-page-subtitle">Organize and track your tasks with drag and drop functionality</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="ms-btn ms-btn-secondary active" onclick="showView('board')" id="boardViewBtn">
                <i class="fas fa-columns me-1"></i>Board View
            </button>
            <button type="button" class="ms-btn ms-btn-secondary" onclick="showView('list')" id="listViewBtn">
                <i class="fas fa-list me-1"></i>List View
            </button>
        </div>
    </div>
</div>

<!-- Task Statistics -->
<div class="ms-dashboard-stats mb-4">
    <div class="ms-stat-card">
        <div class="ms-stat-number">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.Todo)</div>
        <div class="ms-stat-label">To Do</div>
        <div class="ms-stat-icon"><i class="fas fa-clipboard-list"></i></div>
    </div>
    <div class="ms-stat-card orange">
        <div class="ms-stat-number">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.InProgress)</div>
        <div class="ms-stat-label">In Progress</div>
        <div class="ms-stat-icon"><i class="fas fa-play-circle"></i></div>
    </div>
    <div class="ms-stat-card purple">
        <div class="ms-stat-number">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.InReview)</div>
        <div class="ms-stat-label">In Review</div>
        <div class="ms-stat-icon"><i class="fas fa-eye"></i></div>
    </div>
    <div class="ms-stat-card green">
        <div class="ms-stat-number">@Model.Count(t => t.Status == OmintakProduction.Models.TaskStatus.Completed)</div>
        <div class="ms-stat-label">Completed</div>
        <div class="ms-stat-icon"><i class="fas fa-check-circle"></i></div>
    </div>
</div>

<!-- Kanban Board View -->
<div id="boardView">
    <div class="kanban-board">
        @foreach (var statusGroup in tasksByStatus)
        {
            <div class="kanban-column drop-zone" data-status="@statusGroup.Key.ToString()">
                <div class="kanban-column-header">
                    <h5 class="mb-1">@statusGroup.Key.ToString().Replace("InProgress", "In Progress").Replace("InReview", "In Review")</h5>
                    <span class="ms-badge ms-badge-primary">@statusGroup.Count() tasks</span>
                </div>
                <div class="kanban-items">
                    @foreach (var task in statusGroup)
                    {
                        <div class="kanban-item draggable ms-card ms-card-@(GetCardColorClass(task.Priority.ToString()))" 
                             data-id="@task.Id" 
                             data-type="task" 
                             data-status="@task.Status.ToString()" 
                             data-priority="@task.Priority.ToString()"
                             draggable="true">
                            <div class="kanban-item-title">@task.Title</div>
                            <div class="kanban-item-description">
                                <p class="mb-2">@task.Description</p>
                            </div>
                            <div class="kanban-item-details">
                                @if (task.AssignedUsers?.Any() == true)
                                {
                                    <div class="mb-2">
                                        <i class="fas fa-users me-1"></i>
                                        <strong>Assigned:</strong>
                                        @string.Join(", ", task.AssignedUsers.Select(u => u.UserName))
                                    </div>
                                }
                                @if (task.DueDate.HasValue)
                                {
                                    <div class="mb-2">
                                        <i class="fas fa-calendar me-1"></i>
                                        <strong>Due:</strong> @task.DueDate.Value.ToString("MMM dd, yyyy")
                                    </div>
                                }
                                @if (task.EstimatedHours > 0)
                                {
                                    <div class="mb-2">
                                        <i class="fas fa-clock me-1"></i>
                                        <strong>Estimated:</strong> @task.EstimatedHours hrs
                                    </div>
                                }
                            </div>
                            <div class="kanban-item-meta">
                                <div class="d-flex gap-1">
                                    <span class="ms-badge ms-badge-@(GetStatusBadgeClass(task.Status.ToString()))">@task.Status.ToString().Replace("InProgress", "In Progress").Replace("InReview", "In Review")</span>
                                    <span class="ms-badge ms-badge-@(GetPriorityBadgeClass(task.Priority.ToString()))">@task.Priority</span>
                                </div>
                                <small class="text-muted">@task.CreatedAt.ToString("MMM dd")</small>
                            </div>
                            <div class="mt-3">
                                <div class="d-flex gap-2">
                                    <a href="@Url.Action("Details", "Task", new { id = task.Id })" 
                                       class="ms-btn ms-btn-secondary btn-sm flex-fill">
                                        <i class="fas fa-eye me-1"></i> View
                                    </a>
                                    <a href="@Url.Action("Edit", "Task", new { id = task.Id })" 
                                       class="ms-btn ms-btn-secondary btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <form asp-action="Delete" asp-controller="Task" asp-route-id="@task.Id" 
                                          method="post" 
                                          onsubmit="return confirm('Are you sure you want to delete this task?');" 
                                          style="display:inline;">
                                        <button type="submit" class="ms-btn ms-btn-danger btn-sm">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.InReview))
                {
                    <div class="task-card" data-task-id="@task.Id">
                        <div class="task-card-header">
                            <h6 class="task-card-title">@task.Title</h6>
                            <span class="badge @(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "high" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "medium" : "low")">
                                @task.Priority
                            </span>
                        </div>
                        <p class="task-card-subtitle">@task.Description</p>
                        <div class="flex justify-between items-center">
                            <span class="text-secondary text-sm">@task.CreatedAt.ToString("MMM dd")</span>
                            <div class="button-group">
                                <a asp-action="Details" asp-route-id="@task.Id" class="button button-sm">View</a>
                                <a asp-action="Edit" asp-route-id="@task.Id" class="button button-sm button-secondary">Edit</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="task-column">
            <div class="task-column-header">
                <h6 class="task-column-title">
                    <i class="fas fa-check text-success"></i>
                    Completed
                </h6>
            </div>
            <div class="task-column-content" id="completedColumn">
                @foreach (var task in Model.Where(t => t.Status == OmintakProduction.Models.TaskStatus.Completed))
                {
                    <div class="task-card task-card-completed" data-task-id="@task.Id">
                        <div class="task-card-header">
                            <h6 class="task-card-title">@task.Title</h6>
                            <span class="badge @(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "high" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "medium" : "low")">
                                @task.Priority
                            </span>
                        </div>
                        <p class="task-card-subtitle">@task.Description</p>
                        <div class="flex justify-between items-center">
                            <span class="badge bg-@(task.Priority == OmintakProduction.Models.TaskPriority.High || task.Priority == OmintakProduction.Models.TaskPriority.Critical ? "danger" : task.Priority == OmintakProduction.Models.TaskPriority.Medium ? "warning" : "secondary")">
                                @task.Priority
                            </span>
                            <small class="text-muted">@task.CompletedAt?.ToString("MMM dd")</small>
                        </div>
                        <div class="mt-2">
                            <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-primary">View</a>
                            <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- List View (Initially Hidden) -->
<div id="listView" style="display: none;">
    <div class="ms-card">
        <div class="ms-card-body">
            <table class="ms-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Assigned To</th>
                        <th>Due Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in Model)
                    {
                        <tr>
                            <td>
                                <strong>@task.Title</strong>
                                <br>
                                <small class="text-muted">@task.Description</small>
                            </td>
                            <td>
                                <span class="ms-badge ms-badge-@(GetStatusBadgeClass(task.Status.ToString()))">
                                    @task.Status.ToString().Replace("InProgress", "In Progress").Replace("InReview", "In Review")
                                </span>
                            </td>
                            <td>
                                <span class="ms-badge ms-badge-@(GetPriorityBadgeClass(task.Priority.ToString()))">
                                    @task.Priority
                                </span>
                            </td>
                            <td>
                                @if (task.AssignedUsers?.Any() == true)
                                {
                                    @string.Join(", ", task.AssignedUsers.Select(u => u.UserName))
                                }
                                else
                                {
                                    <span class="text-muted">Unassigned</span>
                                }
                            </td>
                            <td>
                                @if (task.DueDate.HasValue)
                                {
                                    @task.DueDate.Value.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">No due date</span>
                                }
                            </td>
                            <td>
                                <div class="d-flex gap-1">
                                    <a href="@Url.Action("Details", "Task", new { id = task.Id })" 
                                       class="ms-btn ms-btn-secondary btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="@Url.Action("Edit", "Task", new { id = task.Id })" 
                                       class="ms-btn ms-btn-secondary btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <form asp-action="Delete" asp-controller="Task" asp-route-id="@task.Id" 
                                          method="post" 
                                          onsubmit="return confirm('Are you sure you want to delete this task?');" 
                                          style="display:inline;">
                                        <button type="submit" class="ms-btn ms-btn-danger btn-sm">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
function showView(viewType) {
    const boardView = document.getElementById('boardView');
    const listView = document.getElementById('listView');
    const boardBtn = document.getElementById('boardViewBtn');
    const listBtn = document.getElementById('listViewBtn');
    
    if (viewType === 'board') {
        boardView.style.display = 'block';
        listView.style.display = 'none';
        boardBtn.classList.add('active');
        listBtn.classList.remove('active');
    } else {
        boardView.style.display = 'none';
        listView.style.display = 'block';
        listBtn.classList.add('active');
        boardBtn.classList.remove('active');
    }
}

// Initialize drag and drop when page loads
document.addEventListener('DOMContentLoaded', function() {
    // The dragDropManager is automatically initialized by dragdrop.js
    console.log('Task drag and drop initialized');
});
</script>

@functions {
    string GetCardColorClass(string priority)
    {
        return priority?.ToLower() switch
        {
            "high" => "yellow",
            "critical" => "yellow",
            "urgent" => "yellow",
            "medium" => "purple", 
            "low" => "green",
            _ => "blue"
        };
    }
    
    string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "todo" => "primary",
            "inprogress" => "warning",
            "inreview" => "info",
            "completed" => "success",
            "cancelled" => "danger",
            "onhold" => "secondary",
            _ => "primary"
        };
    }
    
    string GetPriorityBadgeClass(string priority)
    {
        return priority?.ToLower() switch
        {
            "high" => "danger",
            "critical" => "danger",
            "urgent" => "danger",
            "medium" => "warning",
            "low" => "success",
            _ => "primary"
        };
    }
}
